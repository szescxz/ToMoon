on:
  push:
    tags:        
      - 'v*'           # Push events to every tag not containing /

name:  ToMoon Auto Build

jobs:
  linux_amd64:
    name: Linux AMD64
    runs-on: ubuntu-latest
    steps:
      #build tomoon start
      - uses: actions/checkout@v3
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      
      - name: download asset files
        run: wget https://github.com/YukiCoco/ToMoon/releases/download/build/build_assets.zip
      - run: unzip -n build_assets.zip -d tmp/

      - name: Get latest prebuilt Clash.Meta download link
        uses: actions/github-script@v6
        id: core-download-link
        with:
          script: |
            const resp = await github.rest.repos.getLatestRelease({
              owner: 'MetaCubeX',
              repo: 'Clash.Meta'
            })
            const version = resp.data.tag_name
            for (const asset of resp.data.assets)
            {
              if (asset.name == `clash.meta-linux-amd64-${version}.gz`)
              {
                return asset.browser_download_url
              }
            }
          result-encoding: string
      - name: Download prebuilt Clash.Meta
        env:
          DOWNLOAD_LINK: ${{ steps.core-download-link.outputs.result }}
        run: wget "${DOWNLOAD_LINK}" -O - | gunzip -c > tmp/core/clash
      - name: Download GeoIP
        run: wget "https://github.com/MetaCubeX/meta-rules-dat/raw/release/geoip.dat" -O tmp/core/GeoIP.dat

      # build front-end start
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7.12.2
      - name: Install Requestment
        run: | 
             cp -r tmp/usdpl src/
             pnpm i
      - name: build front end
        run: pnpm run build
        working-directory: .
      - name: build external web page
        run: |
              npm i
              npm run build
        working-directory: tomoon-web
      # build front-end end
      # build backend start
      - uses: dtolnay/rust-toolchain@stable
      - uses: ClementTsang/cargo-action@v0.0.2
        with:
          command: build
          directory: ./backend
          args: --target x86_64-unknown-linux-gnu --release
          use-cross: true
          cross-version: 0.2.4
      # build backend end
      #build tomoon stop
      #output: # ToMoon/backend/target/x86_64-unknown-linux-gnu/release/tomoon

      # - uses: actions-rs/toolchain@v1
      #   with:
      #     toolchain: stable
      #     target: x86_64-unknown-linux-gnu
      #     override: true
      # - uses: actions-rs/cargo@v1
      #   with:
      #     use-cross: true
      #     command: build
      #     args: --target x86_64-unknown-linux-gnu --release # ToMoon/backend/target/x86_64-unknown-linux-gnu/release/tomoon
      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: 16
      # - run: pnpm run build
      - name: colect files
        run: |
              mkdir -p ./release/tomoon/bin/core/web
              mkdir -p ./release/tomoon/dist
              cp backend/target/x86_64-unknown-linux-gnu/release/tomoon ./release/tomoon/bin/tomoon
              cp ./dist/index.js ./release/tomoon/dist/index.js
              cp main.py ./release/tomoon/main.py
              cp plugin.json ./release/tomoon/plugin.json
              cp package.json ./release/tomoon/package.json
              cp -r ./tmp/core ./release/tomoon/bin/
              cp -r ./tomoon-web/dist ./release/tomoon/web
              cd ./release 
              zip -r tomoon-${{ env.RELEASE_VERSION }}.zip tomoon
              cd ..
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          #body_path: Changelog/${{ env.RELEASE_VERSION }}-changelog.md
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./release/tomoon-${{ env.RELEASE_VERSION }}.zip
          asset_name: tomoon-${{ env.RELEASE_VERSION }}.zip
          asset_content_type: application/zip
